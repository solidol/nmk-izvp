[Перелік усіх робіт](README.md)
Інструментальні засоби візуального програмування. Лабораторна робота № 6

# Лабораторна робота № 6

## Створення складного проекту шляхом включення файлів до основного сценарію

## Мета роботи

Освоїти функції підключення зовнішніх файлів до основного сценарію

## Обладнання

Персональний комп'ютер. Пакет програм XAMPP. Текстовий редактор Sublime Text 3 або IDE NetBeans. Web-браузер Chrome, Firefox, Opera

## Хід роботи

1. Впевнитись, що пакет XAMPP встановлено та web-сервер Apache запущений
2. Перейти до каталогу C:\xampp\htdocs\ та очистити його
3. Інструкція include підключає до програми зовнішній файл з PHP кодом. Наприклад, створимо такі файли variable.php, increment.php та index.php. Наповнимо їх таким змістом:
```php
// file variable.php
$a = 0;

// file increment.php
$a++;

// file index.php
include ('variable.php');
include ('increment.php');
include ('increment.php');
 
echo $a;				
```

4. Зберегти всі файли
5. Після запуску скрипта index.php інтерпретатор PHP все це буде послідовно підключати і виконувати: 
```php
<?php
$a = 0;
$a++;
$a++;
echo $a; 
?>
```
6. Якщо ви підключаєте файл всередині функції, то він отримує доступ до області видимості функції, таким чином наступний код також буде працювати без помилок: 
```php
<?php
function a() {
    $a = 0;
    include ('increment.php');
    include ('increment.php'); 
    echo $a;
}
a();
?>
```
**Зауваження!** При підключенні файлу парсинг перемикається в режим HTML, з цієї причини будь-який код всередині файлу, що підключається має бути укладений в PHP теги

7. Розглянемо інший приклад підключення файлу. Для цього створіть factorial.php в якому відбувається обчислення факторіалу
```php
<?php
function getFactorial($n)
{
    $result=1;
    for($i=1; $i <= $n; $i++)
        $result*=$i;
    return $result;
}
?>
```
8. У файлі index.php підключемо попередній файл 
```php
<?php
include "factorial.php";
 
$a = 5;
$fact = getFactorial($a);
echo "Факторіал числа $a дорівнює $fact";
?>
```
9. Використання інструкції include має недоліки. Так, ми можемо в різних місцях коду ненавмисно підключити один і той же файл, що при виконанні коду викличе помилки. Щоб виключити повторне підключення файлу, замість інструкції include треба застосовувати інструкцію include_once
```php
<?php
include_once "factorial.php";
 
$a = 5;
$fact = getFactorial($a);
echo "Факторіал числа $a дорівнює $fact";
?>
```
Тепер, якщо ми підключимо цей же файл за допомогою include_once нижче, то це підключення буде проігноровано, так як файл вже підключений до програми. 

10. Виконати індивідуальне завдання
  + Підключіть зовнішній файл до основного сценарію за допомогою операторів require та require_once
11. Впевнитись, що всі вихідні HTML-сторінки є валідними, використавши валідатор HTML-коду [validator.w3.org](https://validator.w3.org/). За необхідності, виправити помилки та зауваження.
12. Для кожного етапу роботи зробити знімки екрану та додати їх у звіт з описом кожного скіншота
13. Додати програмний код завдання для самомтійного виконання
14. Дати відповіді на контрольні запитання
15. Зберегти звіт у форматі PDF

## Контрольні питання
1. Які ще існують способи підключення файлів?
2. Яка різниця між інструкціями include та require?
3. Чи виникне помилка, якщо в коді зустрінеться декілька інструкцій require, які підключають однаковий файл?
